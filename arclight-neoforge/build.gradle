import io.izzel.arclight.gradle.tasks.RenameJarTask

plugins {
    id 'architectury-plugin' version "${architect_plugin_version}"
    id 'com.gradleup.shadow' version "${shadow_plugin_version}"
}

apply plugin: io.izzel.arclight.gradle.ArclightGradlePlugin

architectury {
    minecraft = minecraftVersion
    platformSetupLoomIde()
    neoForge()
}

loom {
    silentMojangMappingsLicense()
    accessWidenerPath = project(":arclight-common").loom.accessWidenerPath

    neoForge {
    }
}

arclight {
    mcVersion = minecraftVersion
    bukkitVersion = 'v1_21_R1'
    accessTransformer = project(':arclight-common').file('bukkit.at')
    extraMapping = project(':arclight-common').file('extra_mapping.tsrg')
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraftVersion"
    mappings loom.officialMojangMappings()
    neoForge "net.neoforged:neoforge:$neoForgeVersion"

    implementation("org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT") { transitive = false }
    implementation "io.izzel.arclight.generated:spigot:$minecraftVersion:deobf"
    implementation 'net.md-5:bungeecord-chat:1.16-R0.4'

    implementation("io.izzel.arclight:mixin-tools:$mixinToolsVersion") { transitive = false }

    shadowCommon("org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT") { transitive = false }
    shadowCommon "io.izzel.arclight.generated:spigot:$minecraftVersion:deobf"
    shadowCommon('net.md-5:bungeecord-chat:1.20-R0.1') { transitive = false }

    implementation "io.izzel:tools:$toolsVersion"
    implementation "io.izzel.arclight:arclight-api:$apiVersion"
//    compileOnly("net.minecraftforge:eventbus:4.0.0") { transitive = false }
    implementation project(':i18n-config')

    common(project(path: ':arclight-common', configuration: 'namedElements')) { transitive = false }
    shadowCommon(project(path: ':arclight-common', configuration: 'transformProductionNeoForge')) { transitive = false }
}

java {
    withSourcesJar()
}

jar {
    manifest.attributes 'MixinConnector': 'io.izzel.arclight.common.mod.ArclightConnector'
    manifest.attributes 'Implementation-Title': 'Arclight'
    manifest.attributes 'Implementation-Version': "arclight-$minecraftVersion-${project.version}-$gitHash"
    manifest.attributes 'Implementation-Vendor': 'Arclight Team'
    manifest.attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd HH:mm:ss")
}

tasks.register('neoforgeMappings', Copy) {
    destinationDir = file('build/neoforge_mappings')
    from(arclight.mappingsConfiguration.bukkitToNeoForge) {
        rename { name -> 'bukkit_srg.srg' }
    }
    from arclight.mappingsConfiguration.bukkitToForgeInheritance
}

project.sourceSets.main.output.dir file('build/neoforge_mappings'), builtBy: tasks.neoforgeMappings

processResources {
    def ver = "${project.version}+$gitHash"
    inputs.property 'version', ver

    filesMatching('META-INF/neoforge.mods.toml') {
        expand 'version': ver
    }
}

shadowJar {
    exclude 'fabric.mod.json'
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.getName())
}

tasks.register('reobfJar', RenameJarTask) {
    inputJar.set remapJar.archiveFile
    archiveClassifier.set 'reobf'
    mappings = arclight.mappingsConfiguration.reobfBukkitPackage
}

tasks.register('srgJar', Jar) {
    from(tasks.remapJar.outputs.files.collect { it.isDirectory() ? it : zipTree(it) }) {
        include 'io/izzel/**'
        exclude 'io/izzel/arclight/common/mixin/**'
        exclude 'io/izzel/arclight/forge/mixin/**'
    }
    archiveClassifier.set('srg')
    dependsOn remapJar
}

tasks.register('spigotJar', RenameJarTask) {
    inputJar.set tasks.srgJar.archiveFile
    mappings = arclight.mappingsConfiguration.bukkitToForge
    reverse = true
    archiveClassifier.set('spigot')
    dependsOn tasks.srgJar
}

sourcesJar {
    def commonSources = project(':arclight-common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
